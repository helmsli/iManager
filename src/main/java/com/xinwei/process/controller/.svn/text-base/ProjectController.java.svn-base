 
package com.xinwei.process.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import org.activiti.engine.runtime.ProcessInstance;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import com.xinwei.process.constant.ProjectConstants;
import com.xinwei.process.entity.CommonBiz;
import com.xinwei.process.entity.Project;
import com.xinwei.process.entity.ProjectDetailInfo;
import com.xinwei.process.entity.StateInfo;
import com.xinwei.process.service.CommonBizService;
import com.xinwei.process.service.ProcessService;
import com.xinwei.process.service.ProjectService;
import com.xinwei.process.service.UserTaskService;
import com.xinwei.security.entity.User;
import com.xinwei.security.service.UserService;
import com.xinwei.security.vo.ResultVO;
import com.xinwei.util.JsonUtil;
import com.xinwei.util.page.Page;
/**
 * 项目控制器
 *
 */
@Controller
@RequestMapping("/project")
public class ProjectController {

	private Logger logger = LoggerFactory.getLogger(ProjectController.class);
	@Resource
	private ProjectService projectService;
	@Resource
	private ProcessService processServiceImpl;
	@Resource
	private UserTaskService userTaskServiceImpl;
	@Resource
	private UserService userService;
	@Resource
	private CommonBizService commonBizServiceImpl;// 通用业务数据服务
	
	@Value("${officer_CoolMarts}")
	private String officer_CoolMarts;//CoolMarts管理员ID
	@Value("${officer_CamTalk}")
	private String officer_CamTalk;//CamTalk管理员ID
	@Value("${officer_CoolMarts}")
	private String officer_Lottery;//Lottery管理员ID
	@Value("${committee}")
	private String committee;//决策委员会人员ID
	@Value("${departLeader}")
	private String departLeader;//部门经理ID
	
	/**
	 * 保存项目(包括修改后保存)
	 * @param project
	 * @return
	 */
	@RequestMapping(value="/create", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String create(Project project) {
		ResultVO<Object> result = new  ResultVO<>();
		//如果为新申请项目
		if(null == project.getProjectId() || "".equals(project.getProjectId())){
			project.setState(ProjectConstants.State.CODE_START);
			//保存项目
			Long projectId = projectService.save(project);
			//设置流程变量
			Map<String, Object> variables = new HashMap<String, Object>();
			
			//指定项目经理
			variables.put("projectManager", project.getProjectManagerId().toString());
			//根据项目类别指定相应的管理人员
			String officer = this.getAssigneeByProjectCategory(project.getCategoryId().toString());
			variables.put("officer", officer);
			//指定决策委员会
			variables.put("committee", committee);
			//指定部门经理
			variables.put("departLeader", departLeader);
			
			//根据项目周期类型判断是否需要提交周期性报告，如需要设置周期时间
			variables.put("toSubmit", "need"); //设置流程变量：需要提交周期性报告
			variables.put("cycleTime","PT5M"); //设置周期时间（测试阶段：间隔5分钟）
			variables.put("resultOfEndChecked"," ");//初始化终期部门经理审批意见
			//启动项目流程
			ProcessInstance processInstance = processServiceImpl.startProcess("process",
					projectId.toString(), project
							.getProjectManagerId().toString(), variables);
			//设置project对象的流程实例ID
			Project latestProject = projectService.selectByPrimaryKey(projectId);
			latestProject.setProjectProcessInstanceId(processInstance.getId());
			projectService.updateProjectPropertyByProjectId(ProjectService.PROJECTPROCESSINSTANCEID,processInstance.getId(), projectId);
			//给客户端响应
			result.setOthers("projectId", projectId);
			logger.debug("CreateProject-->projectId: "+ projectId);
		}else{
			//修改后保存
			logger.debug("UpdateProject-->projectId: " + project.getProjectId());
			//获取当前项目信息
			Project oldProject = projectService.selectByPrimaryKey(project.getProjectId());
			if(null != oldProject){
				//获取流程实例ID
				String proccessInstanceId =oldProject.getProjectProcessInstanceId();
				//设置当前项目的流程信息
				project.setProjectProcessInstanceId(proccessInstanceId);
				project.setMainCurrentState(oldProject.getMainCurrentState());
				project.setMainPreviousState(oldProject.getMainPreviousState());
				//设置项目状态
				project.setState(oldProject.getState());
				//设置项目申请时间
				project.setProjectApplyTime(oldProject.getProjectApplyTime());
				//更新项目信息
				projectService.update(project);
				Map<String, Object> variables = new HashMap<String, Object>();
				//获取taskId
				StateInfo mainCurrentState = JsonUtil.fromJson(oldProject.getMainCurrentState(),StateInfo.class);
				//完成任务
				userTaskServiceImpl.completeTask(mainCurrentState.getTaskId(), variables);
				//给客户端响应
				result.setOthers("projectId",project.getProjectId());
			}else{
				//给客户端响应
				result.setResult(ResultVO.FAILURE);
				logger.debug("UpdateProject-->fail: Cann't get project by the projectId! ");
			}
		}
		return result.toString();
	}
	
	/**
	 * 查看项目基本信息
	 * @param id
	 */
	@RequestMapping(value="/detail", method={RequestMethod.GET, RequestMethod.POST},produces = "application/json; charset=utf-8")
	public @ResponseBody String detail(@RequestParam(value = "projectId", required = false) Long projectId) {
		ResultVO<Object> resultVO = new ResultVO<Object>();
		if (projectId != null) {
			Project project = projectService.selectByPrimaryKey(projectId);
			if(null!= project){
				//设置项目基本信息
				resultVO.setOthers("poject", project);
			}else{
				//给客户端响应
				resultVO.setResult(ResultVO.FAILURE);
			}	
		}else{
			resultVO.setResult(ResultVO.FAILURE);
		}
		return resultVO.toString();
	}
	
	/**
	 * 获取项目基本信息和项目经理信息
	 * 
	 * @param projectId 项目ID
	 * @return
	 */
	@RequestMapping(value = "/getProjectAndProjectManagerInfo", method = {
			RequestMethod.GET, RequestMethod.POST })
	public @ResponseBody String getProjectAndProjectManagerInfo(Long projectId) {
		logger.debug("GetProjectAndProjectManagerInfo --> projectId: " + projectId);
		ResultVO<Project> result = new ResultVO<>();
		Project project = null;
		User projectManager = null;
		if (projectId != null) {
			project = projectService.selectByPrimaryKey(projectId);
			if(null != project){
				Long projectManagerId = project.getProjectManagerId();
				projectManager = userService.get(projectManagerId);
				result.setOthers("project", project);
				result.setOthers("projectManager", projectManager);
			}else{
				result.setResult(ResultVO.FAILURE);
			}
		}else{
			result.setResult(ResultVO.FAILURE);
		}
		logger.debug("GetProjectAndProjectManagerInfo --> result: " + result.getResult());
		return result.toString();
	}
	
	/**
	 * 查询项目详情（详细）
	 * 
	 * @param projectId 项目ID
	 * @return
	 */
	@RequestMapping(value = "/getProjectDetailInfo", method = {
			RequestMethod.GET, RequestMethod.POST })
	public @ResponseBody String getProjectDetailInfo(Long projectId) {
		logger.debug("GetProjectDetailInfo-->projectId: "+ projectId);
		ProjectDetailInfo projectDetailInfo = projectService
				.getProjectDetailInfo(projectId);
		ResultVO<Project> resultVO = new ResultVO<Project>();
		resultVO.setOthers("projectDetailInfo", projectDetailInfo);
		logger.debug("GetProjectDetailInfo-->result: "+ resultVO.getResult());
		return resultVO.toString();
	}
	
	/**
	 * 预加载项目
	 * @param id
	 */
	@ModelAttribute("preloadProject")
	public Project getOne(@RequestParam(value = "projectId", required = false) Long projectId) {
		if (projectId != null) {
			Project project = projectService.selectByPrimaryKey(projectId);
			return project;
		}
		return null;
	}
	
	/**
	 * 修改项目
	 * @param project
	 */
	@RequestMapping(value="/update", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String update(@ModelAttribute("preloadProject")Project project) 
	{
		projectService.update(project);
		return new ResultVO<>().toString();
	}
	
	/**
	 * 删除项目
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/delete", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String delete(Long id) {
		projectService.delete(id);
		return new ResultVO<>().toString();
	}
	
	/**
	 * 根据UID查询项目列表,查询没有结束的
	 * @param keywords
	 * @return
	 */
	@RequestMapping(value="/myprojects/list", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String getProjectListByUserId(Long userId,Long categoryId) {
		logger.debug("GetProjectListByUserId --> userId: " + userId + ",  categoryId: "+ categoryId);
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("userId", userId);
		queryMap.put("categoryId", categoryId);

		Page<Project> page = projectService.getProjectListByUserId(queryMap);
		
		ResultVO<Project> resultVO = new ResultVO<Project>();
		resultVO.setPage(page); 
		resultVO.setLists(page.getList());
		logger.debug("GetProjectListByUserId -->result:"+resultVO.getResult());
		return resultVO.toString();
	}
	
	
	/**
	 *  根据UID和项目类别分页查询已结项目列表
	 * @param keywords
	 * @return
	 */
	@RequestMapping(value="/getFinishedProjectListByUserId/list", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String getFinishedProjectListByUserId(Long userId,Long categoryId) {
		logger.debug("GetFinishedProjectListByUserId -->userId:" + userId + ",  categoryId" + categoryId);
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("userId", userId);
		queryMap.put("categoryId", categoryId);
		Page<Project> page = projectService.getFinishedProjectListByUserId(queryMap);
		
		ResultVO<Project> resultVO = new ResultVO<Project>();
		resultVO.setPage(page); 
		resultVO.setLists(page.getList());
		logger.debug("GetFinishedProjectListByUserId -->result:"+resultVO.getResult());
		return resultVO.toString();
	}
	
	/**
	 * 获取项目列表
	 * @return
	 */
	@RequestMapping(value="/getProjectList", method={RequestMethod.GET,RequestMethod.POST})
	public @ResponseBody String getAllProjects() {
		List<Project> projects = projectService.selectAll();
		ResultVO<Object> result = new  ResultVO<>();
		result.setOthers("projects", projects);
		return result.toString();
	}
	
	/**
	 * 获取项目尽职调查信息
	 * @return
	 */
	@RequestMapping(value="/getJZDC", method={RequestMethod.GET,RequestMethod.POST})
	public @ResponseBody String getJZDC(Long projectId) {
		logger.debug("GetJZDC --> projectId: " + projectId);
		ResultVO<Object> result = new  ResultVO<>();
		if(null != projectId){
			List<CommonBiz> commonBizes = commonBizServiceImpl
					.selectByProjectIdAndServiceType(projectId, "jzdc");
			if(null != commonBizes && !commonBizes.isEmpty()){
				CommonBiz jzdc = commonBizes.get(0);
				result.setOthers("jzdc", jzdc);
			}else{
				result.setResult(ResultVO.FAILURE);
			}
		}else{
			result.setResult(ResultVO.FAILURE);
		}
		logger.debug("GetJZDC --> result: " + result.getResult());
		return result.toString();
	}
	
	/**
	 *  根据项目类别分页查询尽职调查列表
	 * @return
	 */
	@RequestMapping(value="/getJZDCByProjectCategory/list", method={RequestMethod.GET, RequestMethod.POST})
	public @ResponseBody String getJZDCByProjectCategory(Long categoryId) {
		logger.debug("GetJZDCByProjectCategory --> categoryId:  " + categoryId);
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("projectCategory", categoryId);
		queryMap.put("serviceType", "jzdc");
		Page<CommonBiz> page =commonBizServiceImpl.selectByProjectCategoryAndServiceType(queryMap);
		
		ResultVO<CommonBiz> resultVO = new ResultVO<CommonBiz>();
		resultVO.setPage(page); 
		resultVO.setLists(page.getList());
		logger.debug("GetJZDCByProjectCategory -->result:"+resultVO.getResult());
		return resultVO.toString();
	}
	
	// 根据项目类别设置相应的管理人员
	private String getAssigneeByProjectCategory(
			String categoryId) {
		if (categoryId.equals(ProjectConstants.CATEGORY.CoolMarts)) {
			return officer_CoolMarts;
		} else if (categoryId.equals(ProjectConstants.CATEGORY.CamTalk)) {
			return officer_CamTalk;
		} else {
			return officer_Lottery;
		}
	}
}
